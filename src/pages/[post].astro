---
import type { GetStaticPathsResult } from "astro";
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import BlogPost from "@/layouts/BlogPost";


export async function getStaticPaths(): Promise<GetStaticPathsResult> {
	const posts: CollectionEntry<"post">[] = await getCollection("post");
	const links: CollectionEntry<"link">[] = await getCollection("link");
	const all = [...posts, ...links];
  const isPublishable = (post: CollectionEntry<"post">) => !post.data.draft || import.meta.env.DEV;
	const params = all.filter(isPublishable).flatMap((post, i) => {
    const slug = post.slug.match(/^\d{4}\-\d{2}\-\d{2}\-/) ? post.slug.substring(11) : post.slug;
    const param = [
      {
        params: { post: slug },
        props: { post, prev: all[i - 1], next: all[i + 1] },
      },
    ];
    if (slug !== post.slug) {
      param.push({
        params: { post: post.slug },
        props: { post, prev: all[i - 1], next: all[i + 1], redirect: slug },
      });
    }
    return param
  });
	return params;
}

interface Props {
	post: CollectionEntry<"post">;
}

const { post, prev, next, redirect } = Astro.props;
const { Content } = await post.render();
---
{redirect ? (
<meta
  http-equiv="refresh"
  content={ `0; url=/${ redirect }` }
/>
  ) : null}

<BlogPost post={post}>
	<Content />
	{
		(prev || next) && (
			<div class="pt-20 text-xs flex justify-between">
				{prev && (
					<div class="mb-2 flex gap-1 flex-col">
						<span class="text-xs">Previous post</span>
						<a class="text-xs" href={`/${prev.slug}`}>
							{prev.data.title}
						</a>
					</div>
				)}
				{next && (
					<div class="text-right flex gap-1 flex-col">
						<span class="text-xs">Next Post</span>
						<a class="text-xs" href={`/${next.slug}`}>
							{next.data.title}
						</a>
					</div>
				)}
			</div>
		)
	}
</BlogPost>
